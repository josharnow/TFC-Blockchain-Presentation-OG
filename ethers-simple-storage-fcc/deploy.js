import 'dotenv/config'
import { ethers } from "ethers"
import fs from "fs"
import "dotenv/config"

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL) // This is how we connect to the blockchain (either locally, to something like Ganache, or to a deployed blockchain like a testnet or mainnet)
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8")
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptedJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    // );
    // wallet = await wallet.connect(provider);

    const wallet = new ethers.Wallet(
        process.env.PRIVATE_KEY,
        provider
    ); // The first argument is the private key of the wallet we want to sign transactions from. In this case, it is taken from Ganache.

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet); // 
    console.log("Deploying, please wait...");
    const contract = await contractFactory.deploy(); // The await keyword tells the interpreter that it should wait for the function to finish executing before proceeding. contractFactory.deploy() returns a promise that resolves to a Contract.
    await contract.deployTransaction.wait(1); // Must wait for the block to be added to the blockchain to receive a receipt
    console.log(`Contract Address: ${contract.address}`);

    // const transactionReceipt = await contract.deployTransaction.wait(1); // Must wait for the block to be added to the blockchain to receive a receipt
    // console.log("Here is the deployment transaction (transaction response): ");
    // console.log(contract.deployTransaction);
    // console.log("Here is the transaction receipt: ");
    // console.log(transactionReceipt);

    // console.log("Let's deploy with only transaction data!");
    // const nonce = await wallet.getTransactionCount(); // Gets the nonce from the wallet, which is equivalent to the transaction count. *This is different from the nonce when mining*
    // const tx = { // Defines transaction details
    //     nonce: nonce,
    //     gasPrice: 2000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: '0x608060405260016000806101000a81548160ff021916908315150217905550607b60015560015460025573f14fad4146d08536e4d91e7076d3b64a1363cde4600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600481526020016040518060400160405280600481526020017f4a6f7368000000000000000000000000000000000000000000000000000000008152508152506004600082015181600001556020820151816001019081620000ec91906200037d565b505050348015620000fc57600080fd5b5062000464565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200018557607f821691505b6020821081036200019b576200019a6200013d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001c6565b620002118683620001c6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200025e62000258620002528462000229565b62000233565b62000229565b9050919050565b6000819050919050565b6200027a836200023d565b62000292620002898262000265565b848454620001d3565b825550505050565b600090565b620002a96200029a565b620002b68184846200026f565b505050565b5b81811015620002de57620002d26000826200029f565b600181019050620002bc565b5050565b601f8211156200032d57620002f781620001a1565b6200030284620001b6565b8101602085101562000312578190505b6200032a6200032185620001b6565b830182620002bb565b50505b505050565b600082821c905092915050565b6000620003526000198460080262000332565b1980831691505092915050565b60006200036d83836200033f565b9150826002028217905092915050565b620003888262000103565b67ffffffffffffffff811115620003a457620003a36200010e565b5b620003b082546200016c565b620003bd828285620002e2565b600060209050601f831160018114620003f55760008415620003e0578287015190505b620003ec85826200035f565b8655506200045c565b601f1984166200040586620001a1565b60005b828110156200042f5784890151825560018201915060208501945060208101905062000408565b868310156200044f57848901516200044b601f8916826200033f565b8355505b6001600288020188555050505b505050505050565b610af480620004746000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636f760f411161005b5780636f760f41146100da57806377ec2b55146100f65780638bab8dd5146101155780639e7a13ad146101455761007d565b80631b97975914610082578063471f7cdf146100a05780636057361d146100be575b600080fd5b61008a610176565b60405161009791906103d4565b60405180910390f35b6100a8610180565b6040516100b591906103d4565b60405180910390f35b6100d860048036038101906100d3919061042f565b610186565b005b6100f460048036038101906100ef91906105a2565b6101ae565b005b6100fe610237565b60405161010c92919061067d565b60405180910390f35b61012f600480360381019061012a91906106ad565b6102d1565b60405161013c91906103d4565b60405180910390f35b61015f600480360381019061015a919061042f565b6102ff565b60405161016d92919061067d565b60405180910390f35b6000600254905090565b60015481565b806001819055506001808261019b9190610725565b6101a59190610759565b60018190555050565b6006604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161020d9190610999565b505050806007836040516102219190610aa7565b9081526020016040518091039020819055505050565b600480600001549080600101805461024e906107bc565b80601f016020809104026020016040519081016040528092919081815260200182805461027a906107bc565b80156102c75780601f1061029c576101008083540402835291602001916102c7565b820191906000526020600020905b8154815290600101906020018083116102aa57829003601f168201915b5050505050905082565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6006818154811061030f57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610338906107bc565b80601f0160208091040260200160405190810160405280929190818152602001828054610364906107bc565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b5050505050905082565b6000819050919050565b6103ce816103bb565b82525050565b60006020820190506103e960008301846103c5565b92915050565b6000604051905090565b600080fd5b600080fd5b61040c816103bb565b811461041757600080fd5b50565b60008135905061042981610403565b92915050565b600060208284031215610445576104446103f9565b5b60006104538482850161041a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104af82610466565b810181811067ffffffffffffffff821117156104ce576104cd610477565b5b80604052505050565b60006104e16103ef565b90506104ed82826104a6565b919050565b600067ffffffffffffffff82111561050d5761050c610477565b5b61051682610466565b9050602081019050919050565b82818337600083830152505050565b6000610545610540846104f2565b6104d7565b90508281526020810184848401111561056157610560610461565b5b61056c848285610523565b509392505050565b600082601f8301126105895761058861045c565b5b8135610599848260208601610532565b91505092915050565b600080604083850312156105b9576105b86103f9565b5b600083013567ffffffffffffffff8111156105d7576105d66103fe565b5b6105e385828601610574565b92505060206105f48582860161041a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561063857808201518184015260208101905061061d565b60008484015250505050565b600061064f826105fe565b6106598185610609565b935061066981856020860161061a565b61067281610466565b840191505092915050565b600060408201905061069260008301856103c5565b81810360208301526106a48184610644565b90509392505050565b6000602082840312156106c3576106c26103f9565b5b600082013567ffffffffffffffff8111156106e1576106e06103fe565b5b6106ed84828501610574565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610730826103bb565b915061073b836103bb565b9250828201905080821115610753576107526106f6565b5b92915050565b6000610764826103bb565b915061076f836103bb565b9250828203905081811115610787576107866106f6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107d457607f821691505b6020821081036107e7576107e661078d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261084f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610812565b6108598683610812565b95508019841693508086168417925050509392505050565b6000819050919050565b600061089661089161088c846103bb565b610871565b6103bb565b9050919050565b6000819050919050565b6108b08361087b565b6108c46108bc8261089d565b84845461081f565b825550505050565b600090565b6108d96108cc565b6108e48184846108a7565b505050565b5b81811015610908576108fd6000826108d1565b6001810190506108ea565b5050565b601f82111561094d5761091e816107ed565b61092784610802565b81016020851015610936578190505b61094a61094285610802565b8301826108e9565b50505b505050565b600082821c905092915050565b600061097060001984600802610952565b1980831691505092915050565b6000610989838361095f565b9150826002028217905092915050565b6109a2826105fe565b67ffffffffffffffff8111156109bb576109ba610477565b5b6109c582546107bc565b6109d082828561090c565b600060209050601f831160018114610a0357600084156109f1578287015190505b6109fb858261097d565b865550610a63565b601f198416610a11866107ed565b60005b82811015610a3957848901518255600182019150602085019450602081019050610a14565b86831015610a565784890151610a52601f89168261095f565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000610a81826105fe565b610a8b8185610a6b565b9350610a9b81856020860161061a565b80840191505092915050565b6000610ab38284610a76565b91508190509291505056fea26469706673582212204793ea70b9eb1e9fa1b0ee38fa0e23b2d4a942349a323528e091aad7870aad7e64736f6c63430008110033', // Binary
    //     chainId: 5777, // "Network ID" in Ganache
    // }
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);
    const currentFavoriteNumber = await contract.retrieve();
    console.log(`Current favorite number: ${currentFavoriteNumber.toString()}`);
}

main()
    .then(() => process.exit(0))
    .catch((err) => {
        console.log(err);
        process.exit(1);
    })